// 04. 배열
// 1★1차원 배열과 2차원 배열
// 2★배열의 초기화와 복사

package basic_course;

import java.util.Arrays;

public class basic04 {
    public static void main(String[] args) {
        // 1★1차원 배열과 2차원 배열
        // 배열(Array)은 같은 자료형의 데이터를 하나의 변수에 저장하는 자료구조이다.
        // 여기서 배열은 1차원 배열과 2차원 배열로 나뉜다.

        //1차원 배열은 하나의 인덱스로 접근할 수 있고, 선언 방법은 아래와 같다.
        // 자료형[] 배열명 = new 자료형[크기]

        // 길이가 3인 int형 배열 생성했다.
        int[] array1 = new int[3];

        // 배열에 값 할당
        array1[0] = 1;
        array1[1] = 2;
        array1[2] = 3;

        // 배열 값 출력
        for (int i = 0; i < array1.length; i++) {
            System.out.println(array1[i]);
        }

        // 다음은 2차원 배열을 생성하는 법을 찾아보자.
        // 2차원 배열은 행과 열이 있는 배열로, 배열의 각 요소가 배열이라는 것이다.
        // 예를들어 3행 3열의 2차원 배열은 다음과 같이 생성할 수 있다.
        // 3x3의 int형 배열 생성
        // int[][]는 2차원 배열을 의미한다. [3],[3],은 배열의 크기를 지정한것.
        // 3x3의 배열이므로 [3],[3]으로 지정.
        int[][] array2 = new int[3][3]; //3행 3열의 2차원 배열 생성. 변수명은 'array2'로 지정.

        // 아래 코드에서는 'array2' 배열에 값을 할당한다. 2차원 배열은 행과 열로 구성되므로,
        // [i],[j]로 각 원소에 접근할 수 있다. 예를들어 array[0][0]은 첫번째 행의 첫번째 열에 해당하는 값.
        // 이렇게 하면 3개의 요소를 가진 배열이 생성되고 각 요소는 int형 배열이 총 9개로 구성된다.
        //2차원 배열의 각 요소에 값을 할당할 때는 다음과 같이 인덱스를 이용하여 접근한다.
        array2[0][0] = 1; // 첫 번째 요소에 1에 할당
        array2[0][1] = 2; // 첫 번째 요소의 두 번째 원소에 2할당
        array2[0][2] = 3;
        array2[1][0] = 4;
        array2[1][1] = 5;
        array2[1][2] = 6;
        array2[2][0] = 7;
        array2[2][1] = 8;
        array2[2][2] = 9;

        // 배열 값 출력
        // 아래 코드에서는 array2 배열에 할당된 값을 출력한다. 이중 반복문을 사용하여,
        // 각 행과 열에 해당하는 값을 출력한다. 먼저 'i'변수는 행에 대한 반복문으로, 
        // 'j'변수는 열에 대한 반복문으로 사용된다.
        for (int i = 0; i < array2.length; i++) {  // array2[i].length는 각 행에 대한 열의 길이를,
            for (int j = 0; j < array2[i].length; j++) { 
                System.out.println(array2[i][j] + " "); // 각 원소들을 출력 하는데, 뒤에 띄어쓰기가 포함
                // 되어 있으므로, 원소들이 한 줄에 출력된다.
            }
            System.out.println();
        }
   // ----------------------------------------------------------------------------------------------------------------   
    // 2★배열의 초기화와 복사
    // 배열의 초기화란, 배열을 생성하고, 배열의 각 요소에 값을 할당하는 것을 의미한다.
    // 1. 배열 선언과 생성
    // int[] arr = new int[3]; int 타입의 요소를 갖는 길이가 3인 배열 arr을 생성한다. 

    // 2. 배열의 값 할당
    // arr[0] = 1;
    // arr[1] = 2;
    // arr[2] = 3;
    // 배열의 각 요소에 값을 할당해준다. 이제 arr 배열의 각 요소에는 각각 1,2,3이 저장되어 있다.
    // ----------------------------------------------------------------------------------------------------------------  
    // 배열의 복사
    //  배열의 복사는 기존의 배열에 저장된 데이터를 그대로 유지하면서, 똑같은 데이터를 갖는 새로운
    // 배열을 만드는 것이다. 이 때, 원본 배열과 복사된 배열은 서로 독립적으로 존재한다.

    // Java에서는 배열을 복사할 때, 두 가지 방법을 제공한다.

    // 1.얕은 복사(Shallow Copy) 
    // 얕은 복사는 배열의 '주소값'만을 복사하는 방법이다. 이 방법을 사용하면 원본 배열과 복사된 배열은
    // 같은 메모리 주소를 참조하므로, 한쪽의 값을 수정하면 다른 쪽도 영향을 받게 된다.

    // original이라는 배열을 생성하고 값 1, 2, 3을 할당한다.
    //int[] original = {1, 2, 3};

    // shallowCopy라는 배열을 생성하지 않고, original 배열을 참조한다 (같은 메모리 주소를 가리킨다.)
    //int[] shallowCopy = original;

    // 2. 깊은 복사 
    // 깊은 복사는 배열에 저장된 모든 데이터를 새로운 배열에 복사하는 방법이다. 이 방법을 사용하면 
    // 원본 배열과 복사된 배열은 서로 독립적으로 존재하므로, 한쪽의 값을 수정하더라도 다른 쪽은 영향X

    // deepOriginal이라는 배열을 생성하고 값 1,2,3을 할당.
    // int[] deepOriginal = {1, 2, 3}; 

    // deepCopy라는 새로운 배열을 생성하고, original 배열의 길이와 같은 크기로 만든다.
    // int[] deepCopy = new int[original.length];

    // for문을 이용해 deepOriginal 배열의 각 요소를 deepCopy 배열에 복사한다.
    // 이렇게 복사를 하면 deepOriginal과 deepCopy는 서로 다른 메모리 공간을 가지므로,
    // 하나의 배열이 변경되어도 다른 배열에는 영향을 주지 않는다.
    // for (int = i; i < deepOriginal.length; i++) {
    // deepCopy[i] = deepOriginal[i];
    
    // 또한, java에서는 Array클래스를 사용하여 배열의 복사를 지원한다.

    // 1. 얕은복사
    //int[] original = {1,2,3};
   // int[] shallowCopy = Arrays.copyOf(original, original.length);

   // 2. 깊은 복사
   // int[] original = {1, 2, 3};
   // int[] deepCopy = Arrays.copyOf(original, original.length);
    
    }
}
