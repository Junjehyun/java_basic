// 02. 연산자
// 1★산술 연산자
// 2★비교 연산자
// 3★논리 연산자
// 4★비트 연산자
// 5★삼항 연산자
package basic_course;

public class baisc02 {
    public static void main(String[] args) {
    //1★산술 연산자
    //산술 연산자는 사칙연산에 사용되며, 자료형에 따라 다르게 동작함. 예를들어 int형 변수 a와 b에 각각 5와 3을 저장하고
    //덧셈 연산을 수행하는 코드를 보도록하자.
    int a = 5;
    int b = 3;
    int c = a + b; // a와 b를 더한 결과를 c에 저장, 이제 출력을 해보자
    System.out.println("c의 값: " + c); //c의 값: 8 이라는 결과물이 출력될것이다.
    //이 외에도 뺄셈(-),곱셈(*),나눗셈(/)등을 사용할 수 있다.
    //곱셈한번 해보자.
    int x = 10;
    int y = 3;
    int z = x * y; // x와 y를 곱한 결과를 z에 저장.
    System.out.println("z의 값: " + z); //z의값: 30 이라는 결과물이 출력될것이다.

    //나눗셈 연산자(/)를 사용할 때는 두 피연산자 중 하나가 소수점 이하를 표현할 수 있는 자료형 (Float또는Double)
    //일 경우, 결과가 소수점 이하를 포함하는 실수형 자료형이 된다. 예를들어 변수 p와 q에 각각 10과 3을 저장하고
    // 나눗셈 연산을 수행하는 코드를 실행해보자
    int p = 10;
    int q = 3;
    double r = (double)p /q;

    System.out.println("r의 값: " +r);
    // --------------------------------------------------------------------------------------------------------------------
    //2★비교 연산자
   // 비교 연산자는 주어진 값 또는 변수 간의 관계를 비교하여 true or false의 결과를 반환하는 연산자.
   // 코드에서 직접 한번 보자.
   int j = 10;
   int h = 5; 
   boolean result; // 결과값을 저장하기 위한 boolean 변수를 선언.

   // 등호 연산자 (==)
   result = (j == h); // == : 좌항과 우항이 같으면 true, 다르면 false반환
   System.out.println("j == h : " + result); // false를 출력 (다르기 때문에..j는 10이고 h는 5다.)

  // 부등호 연산자 (!=)
  result = (j != h); // != : 좌항과 우항의 값이 다르면 true, 같으면 false를 반환
  System.out.println("j != h : " + result); // true를 출력 (j와 h는 다르기 때문에 !=를 넣으면 true. 다르기 때문에..)

  // 크기 비교 연산자 (>, <)
  result = (j > h); // 부등호표시... 굳이 설명안해도 어느쪽이 더 크고 작은지 알지?
  System.out.println("j > h : " + result); // j가 h보다 더 큰숫자니까 당연히 true출력
  result = (j < h);
  System.out.println("j < h : " + result); // j가 h보다 더 큰숫자니 당연히 false 출력

  //크기 비교 연산자 (>=, <=)
  result = (j >= h); // >= 좌항의 값이 우항의 값보다 크거나 같으면 true, 작으면 false를 반환
  System.out.println(" j >= h : " + result); // 당연히 답은 j가 h보다 크거나 같으니 true가 반환된다.
  result = (j <= h); // <= 좌항의 값이 우항의 값보다 작거나 같으면 true, 크면 false를 반환
  System.out.println("j <= h : " + result); // 당연히 답은 j가 h보다 크니까 false를 반환하게 된다.
// --------------------------------------------------------------------------------------------------------------------
// 3★논리 연산자
// 논리 연산자는 논리 값 (True, False)을 연산하는 연산자로, 주로 조건문과 반복문에서 많이 사용된다.
// 논리 연산자에는 &&(AND), ||(OR), !(NOT) 세 가지가 있다.

// &&(AND) 연산자는 두 개의 피연산자가 모두 true일때만 true를 반환한다.

// ||(OR) 연산자는 두 개의 피연산자 중 하나라도 true이면 true를 반환한다.
// 두 개의 피연산자가 모두 false인 경우에만 false를 반환. 즉 하나만 얻어 걸려도 true가 반환.

// !(NOT) 연산자는 피연산자의 논리 값을 반대로 바꾼다. true는 false로, false는 true로 바꾼다.
// 예시를 함 보입시다.
int k = 10;
int s = 5; 

result = (k > s) && (k < 20); //true && true -> true 
//  k 가 s보다 크고 k가 20보다 작은지를 묻는 조건이다. 두개의 조건 모두 충족이기 때문에 true다.
result = (k < s) || (s > 0); // false || true -> true
// k가 s보다 작거나 s가 0보다 큰지를 묻는 조건문이다. 전자는 틀렸지만 후자는 맞기 때문에 ture다.
result = !(k == s); // true
// a와 b가 같은지를 묻는 조건문이다. 이 조건문은 false를 반환하고, ! 연산자로 인해 true로 반환된다.
// 즉 틀렸냐? 묻는데 틀린게 맞다는 표현이다.
// --------------------------------------------------------------------------------------------------------------------
// 4★비트 연산자 (필요없을거 같아서 패스, 향후 필요하다 싶으면 공부)
// --------------------------------------------------------------------------------------------------------------------
// 5★삼항 연산자
// 삼항 연산자는 조건문을 간단하게 표현할 수 있는 연산자다. 조건문의 결과에 따라 두 개의 값을 선택하여 반환
// 일반적인 if-else 문의 구조는 다음과 같다.

// if (조건식) {
//     참일 경우 실행할 코드
// } else {
//     거짓일 경우 실행할 코드
// }

// 하지만 삼항 연산자를 사용하면 아래와 같이 간단하게 표현이 가능하다.

// 조건식 ? 참일 경우 실행할 코드 : 거짓일 경우 실행할 코드
int w = 10;
int g = 5;

int max = (w > g) ? w : g; // w가 g보다 크면 w를 작거나 같으면 g를 max변수에 저장
System.out.println(max); // 10출력
// 위 코드에서 '(w > g) ? w : g' 부분은 w가 g보다 크면 w를, 작거나 같으면 g를 반환한다.
// 따라서 max에는 변수 10이 저장된다.

    }
}
